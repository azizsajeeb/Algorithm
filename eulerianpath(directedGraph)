  /*in the name of almighty ALLAH*/

  #include <bits/stdc++.h>

  using namespace std;
const int N = 4e5 + 9;

/*
all the edges should be in the same connected component
#directed graph: euler path: for all -> indeg = outdeg or nodes having indeg > outdeg = outdeg > indeg = 1 and for others in = out
#directed graph: euler circuit: for all -> indeg = outdeg
*/

//euler path in a directed graph
//it also finds circuit if it exists

vector<int>adj[N],ans;
int done[N];
int indeg[N],outdeg[N];
int n;

void dfs(int u){
    if(done[u]<adj[u].size()){
        dfs(adj[u][done[u]++]); //must traverse all node the vertex
    }

    ans.push_back(u);
}
  int main() {

  ios_base::sync_with_stdio(false);
  cin.tie(0);cout.tie(0);
  
  
cin>>n;
int edge; cin>>edge;

for(int i=0;i<edge;i++){
    int u,v; cin>>u>>v;
    adj[u].push_back(v);
    outdeg[u]++;
    indeg[v]++;
}

int ok=1;
int cnt1=0,cnt2=0;
int root=0;
for(int i=1;i<=n;i++){
 if(indeg[i]-outdeg[i]==1)cnt1++;
 if(outdeg[i]-indeg[i]==1)cnt2++, root =i;
 if(abs(indeg[i]-outdeg[i])>1){
    ok=0;
 }
}

if(cnt1>1 || cnt2>1){
    ok=0;
}

if(!ok){
    cout<<"NO eulerian path exist\n";
    return 0;

}

if(root==0){
    for(int i=1;i<=n;i++)if(outdeg[i])root=i;
}

if(root==0){
    cout<<"The graph the empty\n"; return 0;
}

dfs(root);

if(ans.size()!=edge+1){
    cout<<"The graph is not connected\n"; return 0;
}
  
  cout<<"Eulerian pathe exist\n";
  reverse(ans.begin(),ans.end());
  for(auto x:ans)cout<<x<<" ";
  cout<<endl;
  }
